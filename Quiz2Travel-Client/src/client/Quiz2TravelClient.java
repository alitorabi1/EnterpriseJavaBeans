package client;

import ejb.Quiz2TravelServiceRemote;
import entities.Traveller;
import entities.Trip;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class Quiz2TravelClient extends javax.swing.JFrame {

    Quiz2TravelServiceRemote service;
    DefaultListModel travellersModel;
    DefaultListModel tripsModel;

    public Quiz2TravelClient() {
        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            InitialContext ctx = new InitialContext(props);
            service = (Quiz2TravelServiceRemote) ctx.lookup(Quiz2TravelServiceRemote.class.getName());            
            travellersModel = new DefaultListModel<Traveller>();
            tripsModel = new DefaultListModel<Trip>();          
            
            initComponents();                    
            
            updateTravellerList();
        } catch (NamingException ex) {
            JOptionPane.showMessageDialog(null, "Error connectiong to Glassfish");
            throw new RuntimeException("Error connecting to Glassfish", ex);
        }
    }
    
    private void updateTravellerList() {
        List<Traveller> list = service.getAllTravellers();
        travellersModel.removeAllElements();
        for(Traveller t: list){
           travellersModel.addElement(t);
        }
    }

    private void updateTripsList(Traveller traveller) {
        List<Trip> list = service.getTripsByTraveller(traveller);
        tripsModel.removeAllElements();
        for(Trip tr: list ){
            tripsModel.addElement(tr);
        }
    }

    private void updateTripsListByFilter(Traveller traveller, String trip) {
        List<Trip> list = service.getTripsByFilter(traveller, trip);
        tripsModel.removeAllElements();
        for(Trip tr: list ){
            tripsModel.addElement(tr);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tfPassport = new javax.swing.JTextField();
        btAddTraveller = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlTravellers = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfDestination = new javax.swing.JTextField();
        tfDate = new javax.swing.JTextField();
        tfFilter = new javax.swing.JTextField();
        btAddTrip = new javax.swing.JButton();
        btFilter = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlTrips = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Person name:");

        jLabel2.setText("Passport No:");

        btAddTraveller.setText("Add");
        btAddTraveller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddTravellerActionPerformed(evt);
            }
        });

        jlTravellers.setModel(travellersModel);
        jlTravellers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlTravellersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlTravellers);

        jLabel3.setText("Trip destination:");

        jLabel4.setText("Trip date (YYYY/MM/DD):");

        jLabel5.setText("Show only trips to:");

        btAddTrip.setText("Add");
        btAddTrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddTripActionPerformed(evt);
            }
        });

        btFilter.setText("Filter");
        btFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFilterActionPerformed(evt);
            }
        });

        jlTrips.setModel(tripsModel);
        jScrollPane2.setViewportView(jlTrips);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfName)
                            .addComponent(tfPassport, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btAddTraveller)))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfDestination)
                            .addComponent(tfDate)
                            .addComponent(tfFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btAddTrip)
                            .addComponent(btFilter)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(tfDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfPassport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAddTraveller)
                    .addComponent(jLabel4)
                    .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAddTrip))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAddTravellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddTravellerActionPerformed
        try{
        String name = tfName.getText();
        String passportNo = tfPassport.getText();
        
        if(name.isEmpty()){
            JOptionPane.showMessageDialog(this, "Traveller name must not be empty");
            return;
        }
        if(passportNo.isEmpty()){
            JOptionPane.showMessageDialog(this, "Passport number must not be empty");
            return;
        }
        service.addTraveller(new Traveller(name, passportNo));
        updateTravellerList();
        
        } catch(RuntimeException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Could not perform operation ");
        }
    }//GEN-LAST:event_btAddTravellerActionPerformed

    private void btAddTripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddTripActionPerformed
        String destination = tfDestination.getText();
        String dateStr = tfDate.getText();
        if(destination.isEmpty()){
            JOptionPane.showMessageDialog(this, "Destination must not be empty");
            return;
        }
        if(dateStr.isEmpty()){
            JOptionPane.showMessageDialog(this, "Date of trip must not be empty");
            return;
        }
        if(jlTravellers.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Please select a Traveller");
            return;
        }
        try {
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            Date date = format.parse(dateStr);
            Traveller traveller = (Traveller) jlTravellers.getSelectedValue();
            service.addTrip(new Trip(destination, date, traveller));
            updateTripsList(traveller);
        } catch (ParseException | RuntimeException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Could not perform operation ");
        }
    }//GEN-LAST:event_btAddTripActionPerformed

    private void btFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFilterActionPerformed
        String trip = tfFilter.getText();
        if(trip.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a trip to find");
            return;
        }
        if(jlTravellers.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Please select a Traveller");
            return;
        }
        try {
            Traveller traveller = (Traveller) jlTravellers.getSelectedValue();
            updateTripsListByFilter(traveller, trip);
        } catch (RuntimeException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Could not perform operation ");
        }
    }//GEN-LAST:event_btFilterActionPerformed

    private void jlTravellersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlTravellersValueChanged
        Traveller traveller = (Traveller) jlTravellers.getSelectedValue();
        updateTripsList(traveller);
    }//GEN-LAST:event_jlTravellersValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quiz2TravelClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz2TravelClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quiz2TravelClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quiz2TravelClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Quiz2TravelClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddTraveller;
    private javax.swing.JButton btAddTrip;
    private javax.swing.JButton btFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Traveller> jlTravellers;
    private javax.swing.JList<Trip> jlTrips;
    private javax.swing.JTextField tfDate;
    private javax.swing.JTextField tfDestination;
    private javax.swing.JTextField tfFilter;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPassport;
    // End of variables declaration//GEN-END:variables
}
